var documenterSearchIndex = {"docs":
[{"location":"howto/#Common-How-to's","page":"Guided Examples","title":"Common How-to's","text":"","category":"section"},{"location":"license/#License","page":"About","title":"License","text":"","category":"section"},{"location":"license/","page":"About","title":"About","text":"The Splines.jl package is licensed under the MIT \"Expat\" License:","category":"page"},{"location":"license/","page":"About","title":"About","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"license/","page":"About","title":"About","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"license/","page":"About","title":"About","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"reference/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"reference/#Bezier-Functions","page":"API Reference","title":"Bezier Functions","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.binomialcoeff","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nn = 6\ni = 2\nnchoosei = Splines.binomialcoeff(n, i)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.bernsteincoeff","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Examples","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 1: single u value","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nu = 0.5\nn = 6\ni = 2\nb = Splines.bernsteincoeff(u, n, i)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 2: u as an array","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines #hide\nu = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nn = 6\ni = 2\nb = Splines.bernsteincoeff(u, n, i)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.simple_bezier1D","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nusing Plots\n\n\nP = [0.0 0.0; 0.0 0.1; 0.3 0.25; 1.0 0.0] #control point definition\nu = collect(0:0.05:1.0) #parametric points\n\nbezierCurve = Splines.simple_bezier1D(P, u)\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24, linewidths = 5)\nplot!(bezierCurve[:, 1], bezierCurve[:, 2], linewidths=10, aspectratio=:equal, grid=:off, label=\"Bezier\")\nplot!(P[:, 1], P[:, 2], markersizes=10, markershapes=:rect, linewidths=10, label=\"Control Points\")\nsavefig(\"simplebezier.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"P = [0.0 0.0; 0.0 0.1; 0.3 0.25; 1.0 0.0] #control point definition\nu = collect(0:0.05:1.0) #parametric points\n\nbezierCurve = Splines.simple_bezier1D(P, u)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"reference/#B-Spline-Functions","page":"API Reference","title":"B-Spline Functions","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.getspanindex(n, p, u, U)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nU = [0,0,0,1,2,3,4,4,5,5,5]\np = 2\nn = length(U)-p-1","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"U = [0,0,0,1,2,3,4,4,5,5,5]\np = 2\nn = length(U)-p-1\n\nu = 5/2\nSplines.getspanindex(n,p,u,U)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"u = 5\nSplines.getspanindex(n,p,u,U)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"u = 0\nSplines.getspanindex(n,p,u,U)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.basisfunctions(i, u, p, U)","category":"page"},{"location":"reference/#Splines.basisfunctions-NTuple{4,Any}","page":"API Reference","title":"Splines.basisfunctions","text":"basisfunctions(span, deg, knots, u)\n\n(private function) Compute nonvanishing basis functions (NURBS A2.2)\n\nArguments\n\ndeg::Integer: degree\nknots::Vector{Float64}:: a knot vector (u0, ... un+1) \nu::Float64`: nondimensional location we are searching for\nspan::Integer: corresponding index i for u between knotsi and knotsi+1 (computed from getspanindex)\n\nReturns\n\nN::Vector{Float64}: vector of length N0 ... Ndeg\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nU = [0,0,0,1,2,3,4,4,5,5,5]\nu = 5/2\np = 2\ni = 5\nbases = Splines.basisfunctions(i,u,p,U)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.basisfunctionsderivatives(i, u, p, n, U)","category":"page"},{"location":"reference/#Splines.basisfunctionsderivatives-NTuple{5,Any}","page":"API Reference","title":"Splines.basisfunctionsderivatives","text":"basisfunctionsderivatives(span, deg, knots, u, n)\n\n(private function) Calculate the non-vanishing basis functions and derivatives of the B-Spline of order p,  defined by knots U at parametric point,u`. (NURBS A 2.3)\n\nArguments\n\nspan::Integer: knot span containing u\ndeg::Integer: the curve order\nknots::Vector{Float}: the knot vector\nu::Float: parametric point of interest\nn::Integer : the max derivative order (n â‰¦ p)\n\nReturns\n\nders::Matrix{Float}: [0..n, 0..p]  ders[0, :] function values, ders[1: :], first derivatives, etc.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nU = [0,0,0,1,2,3,4,4,5,5,5]\nu = 5/2\np = 2\ni = 5\nn = p\nderivatives = Splines.basisfunctionsderivatives(i,u,p,n,U)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.curvederivatives1(n, p, U, P, u, d)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nU = [0,0,0,1,2,3,4,4,5,5,5]\nu = 5/2\np = 2\nn = length(U)-p-1\nP = [0 0; 1/2 1/2; 1 0; 3/2 1/2; 2 0; 5/2 1/2; 3 0]\nd = 1\ncurveDerivatives = Splines.curvederivatives1(n, p, U, P, u, d)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.curvederivativecontrolpoints(n, p, U, P, d, r1, r2)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nU = [0,0,0,0,2/5,3/5,3/5,1,1,1,1]\nu = 1/2\ni = 4\nd = 1\np = 3\nP = [0 0; 1/2 1/2; 1 0; 3/2 1/2; 2 0; 5/2 1/2; 3 0]\nn = length(P[:,1])-1\nr1 = 0\nr2 = n\ncprime = Splines.curvederivativecontrolpoints(n, p, U, P, d, r1, r2)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.globalcurveinterpolation(n,Q,r,p; knotplacement)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nQ = [0 0; 3 4; -1 4; -4 0; -4 -3]\nr = 2\nn = 4\np = 3\nU = [0 0 0 0 28/51 1 1 1 1]\nm, U, P = Splines.globalcurveinterpolation(n,Q,r,p;knotplacement=\"chordlength\")","category":"page"},{"location":"reference/#NURBS-Functions","page":"API Reference","title":"NURBS Functions","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.nurbsbasis","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines #hide\nU = [0,0,0,1,2,3,4,4,5,5,5] #knot vector\nw = [1,1,1,1,1,1,1] #control point weights\nu = 5/2 #parametric point of interest\np = 2 #curve degree\nn = 1 #number of derivatives\nR, dR = Splines.nurbsbasis(u,p,n,U,w) #rational bases and first derivatives","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.curvepoint","category":"page"},{"location":"reference/#Splines.curvepoint","page":"API Reference","title":"Splines.curvepoint","text":"Evaluate point on B-spline curve (NURBS, A3.1)\n\nArguments\n\nbspline::BSpline: bspline object\nu::Float: point on spline to evaluate at\n\nReturns\n\nC::Vector{Float}: point in ND space\n\n\n\n\n\nEvaluate point on rational b-spline curve (NURBS, A4.1)\n\nArguments\n\nnurbs::NURBS: NURBS object\nu::Float: point on spline to evaluate at\n\nReturns\n\nC::Vector{Float}: point in ND space\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Examples","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 1: single point","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nU = [0, 0, 0, 1, 1, 1] #knot vector\nu = 0 #parametric point of interest\np = 2 #curve order\nP = [1 0; 1 1; 0 1] #unweighted points\nw = [1 1 2] #weights\nPw = [1 0 1; 1 1 1; 0 2 2] #weighted points\nn = length(P[:, 1])-1\nCw = Splines.curvepoint(n, p, U, Pw, u)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nU = [0, 0, 0, 1, 1, 1] #knot vector\nu = collect(0:0.05:1.0) #parametric points\np = 2 #curve order\nP = [1 0; 1 1; 0 1] #unweighted points\nw = [1 1 2] #weights\nPw = [1 0 1; 1 1 1; 0 2 2] #weighted points\nn = length(P[:, 1])-1\nCw = zeros(length(u), length(Pw[1, :]))\nfor i = 1:length(u)\n  Cw[i, :] = Splines.curvepoint(n, p, U, Pw, u[i])\nend\n\n\nusing Plots\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24)\nplot!(Cw[:, 1], Cw[:, 2], linewidths=10, aspectratio=:equal, grid=:off, label=\"NURBS\")\nplot!(P[:, 1], P[:, 2], markersizes=10, markershapes=:square, linewidths=10, label=\"Control Points\")\nsavefig(\"nurbscircle.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 2: array of points","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"U = [0, 0, 0, 1, 1, 1] #knot vector\nu = collect(0:0.05:1.0) #parametric points\np = 2 #curve order\nP = [1 0; 1 1; 0 1] #unweighted points\nw = [1 1 2] #weights\nPw = [1 0 1; 1 1 1; 0 2 2] #weighted points\nn = length(P[:, 1])-1\nCw = zeros(length(u), length(Pw[1, :]))\nfor i = 1:length(u)\n  Cw[i, :] = Splines.curvepoint(n, p, U, Pw, u[i])\nend","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.rationalcurvederivatives","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines # hide\nU = [0, 0, 0, 1, 1, 1] #knot vector\nu = 0 #parametric point of interest\np = 2 #curve order\nP = [1 0; 1 1; 0 1] #unweighted points\nw = [1 1 2] #weights\nPw = [1 0 1; 1 1 1; 0 2 2] #weighted points\nn = length(P[:, 1])-1\nd = 2 #max derivative level (2nd derivative)\n#Calculate Cw(u) derivatives\nders = Splines.curvederivatives1(n, p, U, Pw, u, d)\n#Separate derivatives\nAders = ders[:, 1:end-1]\nwders = ders[:, end]\n#Calculate NURBS derivatives\nCK = Splines.rationalcurvederivatives(Aders, wders, d)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.curveknotinsertion","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Examples","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 1: Unique Knot Insertion","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nusing Plots\n\n\nUP = [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5]\nu = 5/2\np = 3\nP = [0 0; 1 1; 2 0; 3 0; 4 1; 3 2; 2 2; 1.5 1]\nw = [1 1 1 1 1 1 1 1]\nPw = [0 0 1; 1 1 1; 2 0 1; 3 0 1; 4 1 1; 3 2 1; 2 2 1; 1.5 1 1]\nnp = length(P[:, 1])-1\nk = 5\ns = 0\nr = 1\n\nnq, UQ, Qw = Splines.curveknotinsertion(np, p, UP, Pw, u, k, s, r)\n\ncurvepoints = collect(0:0.1:5)\nCw1 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw1[i, :] = Splines.curvepoint(np, p, UP, Pw, curvepoints[i])\nend\n\ncurvepoints = collect(0:0.1:5)\nCw2 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw2[i, :] = Splines.curvepoint(nq, p, UQ, Qw, curvepoints[i])\nend\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24)\nplot!(linewidths=10, aspectratio=:equal, grid=:off)\nplot!(Cw1[:, 1], Cw1[:, 2], linewidths=10, label=\"Original Spline\")\nplot!(Cw2[:, 1], Cw2[:, 2], linestyle=:dot, linewidths=10, label=\"New Spline\")\nplot!(Pw[:, 1], Pw[:, 2], markersizes=10, markershapes=:square, linewidths=7, label=\"Original CP's\")\nplot!(Qw[4:6, 1], Qw[4:6, 2], markersizes=10, markershapes=:circle, linestyle=:dash, linewidths=7, label=\"New Control Points\")\nsavefig(\"uniqueknotinsert.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"UP = [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5]\nu = 5/2\np = 3\nP = [0 0; 1 1; 2 0; 3 0; 4 1; 3 2; 2 2; 1.5 1]\nw = [1 1 1 1 1 1 1 1]\nPw = [0 0 1; 1 1 1; 2 0 1; 3 0 1; 4 1 1; 3 2 1; 2 2 1; 1.5 1 1]\nnp = length(P[:, 1])-1\nk = 5\ns = 0\nr = 1\n\nnq, UQ, Qw = Splines.curveknotinsertion(np, p, UP, Pw, u, k, s, r)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 2: Repeated Knot Insertion","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nusing Plots\n\n\nUP = [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5]\nu = 2\np = 3\nP = [0 0; 1 1; 2 0; 3 0; 4 1; 3 2; 2 2; 1.5 1]\nw = [1 1 1 1 1 1 1 1]\nPw = [0 0 1; 1 1 1; 2 0 1; 3 0 1; 4 1 1; 3 2 1; 2 2 1; 1.5 1 1]\nnp = length(P[:, 1])-1\nk = 5\ns = 1\nr = 1\n\nnq, UQ, Qw = Splines.curveknotinsertion(np, p, UP, Pw, u, k, s, r)\n\ncurvepoints = collect(0.0:0.1:5.0)\nCw1 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw1[i, :] = Splines.curvepoint(np, p, UP, Pw, curvepoints[i])\nend\n\ncurvepoints = collect(0.0:0.1:5.0)\nCw2 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw2[i, :] = Splines.curvepoint(nq, p, UQ, Qw, curvepoints[i])\nend\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24)\nplot!(linewidths=10, aspectratio=:equal, grid=:off)\nplot!(Cw1[:, 1], Cw1[:, 2], linewidths=10, label=\"Original Spline\")\nplot!(Cw2[:, 1], Cw2[:, 2], linestyle=:dot, linewidths=10, label=\"New Spline\")\nplot!(Pw[:, 1], Pw[:, 2], markersizes=10, markershapes=:square, linewidths=7, label=\"Original CP's\")\nplot!(Qw[4:6, 1], Qw[4:6, 2], markersizes=10, markershapes=:circle, linestyle=:dash, linewidths=7, label=\"New Control Points\")\nsavefig(\"repeatknotinsert.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"UP = [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5]\nu = 2\np = 3\nP = [0 0; 1 1; 2 0; 3 0; 4 1; 3 2; 2 2; 1.5 1]\nw = [1 1 1 1 1 1 1 1]\nPw = [0 0 1; 1 1 1; 2 0 1; 3 0 1; 4 1 1; 3 2 1; 2 2 1; 1.5 1 1]\nnp = length(P[:, 1])-1\nk = 5\ns = 1\nr = 1\n\nnq, UQ, Qw = Splines.curveknotinsertion(np, p, UP, Pw, u, k, s, r)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.refineknotvectorcurve","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Example","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nusing Plots\n\n\nU = [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5]\nX = [1.5, 2.5]\np = 3\nP = [0 0; 1 1; 2 0; 3 0; 4 1; 3 2; 2 2; 1.5 1]\nw = [1 1 1 1 1 1 1 1]\nPw = [0 0 1; 1 1 1; 2 0 1; 3 0 1; 4 1 1; 3 2 1; 2 2 1; 1.5 1 1]\nn = length(P[:,1])-1\nr = length(X)-1\n\nUbar, Qwcalcd = Splines.refineknotvectorcurve(n, p, U, Pw, X, r)\n\nnq, UQ, Qw = Splines.curveknotinsertion(n, p, U, Pw, X[1], 4, 0, 1)\nnq, UQ, Qw = Splines.curveknotinsertion(nq, p, UQ, Qw, X[2], 6, 0, 1)\n\ncurvepoints = collect(0:0.1:5)\nCw1 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n    Cw1[i, :] = Splines.curvepoint(n, p, U, Pw, curvepoints[i])\nend\n\ncurvepoints = collect(0:0.1:5)\nCw2 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n    Cw2[i, :] = Splines.curvepoint(nq, p, Ubar, Qwcalcd, curvepoints[i])\nend\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24)\nplot!(linewidths=10, aspectratio=:equal, grid=:off)\nplot!(Cw1[:, 1], Cw1[:, 2], linewidths=10, label=\"Original Spline\")\nplot!(Cw2[:, 1], Cw2[:, 2], linestyle=:dot, linewidths=10, label=\"New Spline\")\nplot!(Pw[:, 1], Pw[:, 2], markersizes=10, markershapes=:square, linewidths=7, label=\"Original CP's\")\nplot!(Qw[2:6, 1], Qw[2:6, 2], markersizes=10, markershapes=:circle, linestyle=:dash, linewidths=7, label=\"New Control Points\")\nsavefig(\"multiknotinsert.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"U = [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5] #original knot vector\nX = [1.5, 2.5] #knots to be added (ascending order)\np = 3 #curve order\nPw = [0 0 1; 1 1 1; 2 0 1; 3 0 1; 4 1 1; 3 2 1; 2 2 1; 1 1 1] #weighted control points\nn = length(P[:,1])-1 #largest zero-based index in control point vector\nr = length(X)-1 #largest zero-based index in X (vector of knots to be added)\n\nUbar, Qw = Splines.refineknotvectorcurve(n, p, U, Pw, X, r)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Splines.degreeelevatecurve","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Examples","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 1: Single Degree Elevation","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nusing Plots\n\n\nU = [0,0,0,0,3/10,7/10,1,1,1,1]\np = 3\nP = [-1 0; -1.5 1; -0.5 2; 0.5 2; 1.5 1; 1 0]\nw = [1 1 1 1 1 1]\nPw = [-1 0 1; -1.5 1 1; -0.5 2 1; 0.5 2 1; 1.5 1 1; 1 0 1]\nn = length(P[:,1])-1\nt = 1\n\nnh, Uh, Qw = Splines.degreeelevatecurve(n,p,U,Pw,t)\n\ncurvepoints = collect(0:0.01:1)\nCw1 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw1[i, :] = Splines.curvepoint(n, p, U, Pw, curvepoints[i])\nend\n\nCw2 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw2[i, :] = Splines.curvepoint(nh, p+t, Uh, Qw, curvepoints[i])\nend\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24)\nplot!(linewidths=10, aspectratio=:equal, grid=:off)\nplot!(Cw1[:, 1], Cw1[:, 2], linewidths=10, label=\"Original Spline\")\nplot!(Cw2[:, 1], Cw2[:, 2], linestyle=:dot, linewidths=10, label=\"New Spline\")\nplot!(Pw[:, 1], Pw[:, 2], markersizes=10, markershapes=:square, linewidths=7, label=\"Original CP's\")\nplot!(Qw[2:end-1, 1], Qw[2:end-1, 2], markersizes=10, markershapes=:circle, linestyle=:dash,linewidths=7,  label=\"New Control Points\")\nsavefig(\"1degreeelevate.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"U = [0,0,0,0,3/10,7/10,1,1,1,1]\np = 3\nP = [-1 0; -1.5 1; -0.5 2; 0.5 2; 1.5 1; 1 0]\nw = [1 1 1 1 1 1]\nPw = [-1 0 1; -1.5 1 1; -0.5 2 1; 0.5 2 1; 1.5 1 1; 1 0 1]\nn = length(P[:,1])-1\nt = 1\n\nnh, Uh, Qw = Splines.degreeelevatecurve(n,p,U,Pw,t)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"example 2: 2 Degree Elevation","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"import Splines\nusing Plots\n\n\nU = [0,0,0,0,3/10,7/10,1,1,1,1]\np = 3\nP = [-1 0; -1.5 1; -0.5 2; 0.5 2; 1.5 1; 1 0]\nw = [1 1 1 1 1 1]\nPw = [-1 0 1; -1.5 1 1; -0.5 2 1; 0.5 2 1; 1.5 1 1; 1 0 1]\nn = length(P[:,1])-1\nt = 2\n\nnh, Uh, Qw = Splines.degreeelevatecurve(n,p,U,Pw,t)\n\ncurvepoints = collect(0:0.01:1)\nCw1 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw1[i, :] = Splines.curvepoint(n, p, U, Pw, curvepoints[i])\nend\n\nCw2 = zeros(length(curvepoints), length(Pw[1, :]))\nfor i = 1:length(curvepoints)\n  Cw2[i, :] = Splines.curvepoint(nh, p+t, Uh, Qw, curvepoints[i])\nend\n\nplot(size=(2400,1600), titlefontsize=24, legendfontsize=24, tickfontsize=24, guidfontsize=24)\nplot!(linewidths=10, aspectratio=:equal, grid=:off)\nplot!(Cw1[:, 1], Cw1[:, 2], linewidths=10, label=\"Original Spline\")\nplot!(Cw2[:, 1], Cw2[:, 2], linestyle=:dot, linewidths=10, label=\"New Spline\")\nplot!(Pw[:, 1], Pw[:, 2], markersizes=10, markershapes=:square, linewidths=7, label=\"Original CP's\")\nplot!(Qw[2:end-1, 1], Qw[2:end-1, 2], markersizes=10, markershapes=:circle, linestyle=:dash,linewidths=7,  label=\"New Control Points\")\nsavefig(\"2degreeelevation.svg\")","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"U = [0,0,0,0,3/10,7/10,1,1,1,1]\np = 3\nP = [-1 0; -1.5 1; -0.5 2; 0.5 2; 1.5 1; 1 0]\nw = [1 1 1 1 1 1]\nPw = [-1 0 1; -1.5 1 1; -0.5 2 1; 0.5 2 1; 1.5 1 1; 1 0 1]\nn = length(P[:,1])-1\nt = 2\n\nnh, Uh, Qw = Splines.degreeelevatecurve(n,p,U,Pw,t)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"(Image: )","category":"page"},{"location":"#Splines.jl","page":"Intro","title":"Splines.jl","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"CurrentModule = Splines","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"Splines.jl is a work-in-progress splines package focusing on BÃ©zier curves, Basis Splines (B-Splines), and Non-uniform Rational B-Splines (NURBS). As of now, the available methods are transcribed from algorithms, or created from equations found in The NURBS Book by Les Piegl and Wayne Tiller, hereafter referred to as \"NURBS\" when referencing equations and/or algorithms.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"The algorithms outlined in the text are for C/C++ code. The C language, and the theory as presented is zero indexed. In an effort to preserve the algorithms as displayed in the text, and to keep the native Julia 1-indexing, indices are typically left as-is from the text with the addition of a '+1'.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"For FLOW Lab students, a quick intro to pertinent spline theory can be found in the FLOW Lab Notebook, but for in depth explanation The NURBS Book is the recommended resource.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"Note that this package has been created primarily for research purposes, so only basic tools required for that research have been implemented at this time. As the research progresses, more methods will be added as required.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"<!â€“ ## Links to Function Descriptions Descriptions of available methods along with example implementations can be found on the functions page.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"Pages = [\"Functions.md\"]\nDepth = 2 -->","category":"page"},{"location":"#About","page":"Intro","title":"About","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"License","category":"page"},{"location":"tutorial/#Quick-Start-Guide","page":"Quick Start","title":"Quick Start Guide","text":"","category":"section"},{"location":"tutorial/#B-Spline-Objects","page":"Quick Start","title":"B-Spline Objects","text":"","category":"section"},{"location":"tutorial/#NURBS-Objects","page":"Quick Start","title":"NURBS Objects","text":"","category":"section"}]
}
